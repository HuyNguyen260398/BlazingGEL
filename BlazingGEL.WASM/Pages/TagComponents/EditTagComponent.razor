@page "/tags/edit/{tagId}"

@inject ITagRepository TagRepo
@inject NavigationManager NavManager

<h3>Edit</h3>

@if (int.Parse(tagId) < 1 || string.IsNullOrWhiteSpace(tagId))
{
    <h3>Tag Id Error</h3>
} 
else if (Tag == null)
{
    <h3>Loading</h3>
}
else
{
    <EditForm Model="Tag" OnValidSubmit="OnSave" class="form-inline">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Name</label>
            <InputText type="text" @bind-Value="Tag.Name" class="form-control" id="name" />
        </div>
        <br/>
        <button type="submit" class="btn btn-info">Save</button>
        <br/>
        <br/>
        <button class="btn btn-secondary" @onclick="OnReturn">Back</button>
    </EditForm>
}

@code {
    [Parameter]
    public string tagId { get; set; }
    private TagDto Tag = new();

    protected async override Task OnInitializedAsync()
    {
        Tag = await TagRepo.GetByIdAsync(EndPoint.TagEnpoint, int.Parse(tagId));
    }

    private async Task OnSave()
    {
        Tag.Slug = Extension.GenerateSlug(Tag.Name);
        var response = await TagRepo.UpdateAsync(EndPoint.TagEnpoint, Tag);

        if (response)
            OnReturn();
    }

    private void OnReturn()
    {
        NavManager.NavigateTo("/tags");
    }
}