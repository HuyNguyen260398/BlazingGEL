@page "/categories"

@inject ICategoryRepository CategoryRepo
@inject NavigationManager NavManager

<h3>Categories</h3>

<button class="btn btn-primary" @onclick="CreateCategory">Create</button>

@if (categories == null || categories.Count() == 0)
{
    <span>Loading categories...</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Slug</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.CategoryId</td>
                    <td>@category.Name</td>
                    <td>@category.Slug</td>
                    <td>
                        <button class="btn btn-info" @onclick="(() => ViewCategory(category.CategoryId))">Details</button>
                    </td>
                    <td>
                        <button class="btn btn-warning" @onclick="(() => EditCategory(category.CategoryId))">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="(() => DeleteCategory(category.CategoryId))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<CategoryDto>? categories;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryRepo.GetAllAsync(EndPoint.CategoryEnpoint);
    }

    private void CreateCategory()
    {
        NavManager.NavigateTo($"categories/create");
    }

    private void ViewCategory(int id)
    {
        NavManager.NavigateTo($"categories/detail/{id}");
    }

    private void EditCategory(int id)
    {
        NavManager.NavigateTo($"categories/edit/{id}");
    }

    private void DeleteCategory(int id)
    {
        NavManager.NavigateTo($"categories/delete/{id}");
    }
}
