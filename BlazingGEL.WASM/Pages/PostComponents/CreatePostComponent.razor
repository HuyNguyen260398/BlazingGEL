@page "/create"

@inject IPostRepository PostRepository
@inject NavigationManager NavManager

<EditForm Model="postDto" OnValidSubmit="OnSave" class="form-inline">
    <div class="form-group">
        <label for="title">Title</label>
        <InputText type="text" @bind-Value="postDto.Title" class="form-control" id="title" />
    </div>
    <div class="form-group">
        <label for="desc">Description</label>
        <InputTextArea type="text" @bind-Value="postDto.Description" class="form-control" id="desc" />
    </div>
    <div class="form-group">
        <label for="category">Category</label>
        <InputNumber type="number" @bind-Value="postDto.CategoryId" class="form-control" id="category" />
    </div>
    <div class="form-group">
        <label for="sub-category">Sub Category</label>
        <InputNumber type="number" @bind-Value="postDto.SubCategoryId" class="form-control" id="sub-category" />
    </div>
    <br/>
    <div class="form-group">
        <SfUploader AutoUpload="false">
            <UploaderEvents ValueChange="OnChange" OnRemove="OnRemove" OnClear="OnClear"/>
        </SfUploader>
        <img src="@postDto.Thumbnail" />
    </div>
    <div class="control-section">
        <div class="control-wrapper">
            <div class="">
                <SfRichTextEditor ShowCharCount="true" MaxLength="2000" AutoSaveOnIdle="true" @bind-Value="postDto.Content">
                    <RichTextEditorToolbarSettings Items="@Tools" />
                </SfRichTextEditor>
            </div>
        </div>
    </div>
    <div class="form-group">
        <InputCheckbox id="publish" @bind-Value="postDto.IsPublished" class="form-check-input" />
        <label for="publish">Publish</label>
    </div>
    <br/>
    <button type="submit" class="btn btn-info">Save</button>
</EditForm>


@code {
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    private string content { get; set; }
    private PostDto postDto = new();
    private fileInfo imgInfo;

    public class fileInfo
    {
        public string Path { get; set; }
        public string Name { get; set; }
        public double Size { get; set; }
    }

    private void OnRemove(RemovingEventArgs args)
    {
        foreach(var removeFile in args.FilesData)
        {
            if (File.Exists(Path.Combine(@"rootPath", removeFile.Name)))
            {
                File.Delete(Path.Combine(@"rootPath", removeFile.Name));
            }
        }
        postDto.Thumbnail = string.Empty;
        StateHasChanged();
    }

    private void OnClear(ClearingEventArgs args)
    {
        foreach(var removeFile in args.FilesData)
        {
            if (File.Exists(Path.Combine(@"rootPath", removeFile.Name)))
            {
                File.Delete(Path.Combine(@"rootPath", removeFile.Name));
            }
        }
        postDto.Thumbnail = string.Empty;
        StateHasChanged();
    }

    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            var path = @"path" + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();

            byte[] bytes = file.Stream.ToArray();
            string base64 = Convert.ToBase64String(bytes);
            imgInfo = new() { Path = @"data:image/" + file.FileInfo.Type + ";base64," + base64, Name = file.FileInfo.Name, Size = file.FileInfo.Size };
            postDto.Thumbnail = imgInfo.Path;
            StateHasChanged();
        }
    }

    private async Task OnSave()
    {
        postDto.Slug = Extension.GenerateSlug(postDto.Title);

        postDto.CreatedAt = DateTime.Now;

        if (postDto.IsPublished)
            postDto.PublishedAt = DateTime.Now;

        postDto.Views = 0;
        postDto.Comments = 0;

        var response = await PostRepository.CreateAsync(EndPoint.PostEnpoint, postDto);

        if (response)
            NavManager.NavigateTo("/posts");
    }
}