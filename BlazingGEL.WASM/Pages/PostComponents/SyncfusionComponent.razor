@page "/syncfusion"
@using Syncfusion.Blazor.Inputs

@inject IPostRepository PostRepository
@inject NavigationManager NavManager
@inject HttpClient Http

<div class="form-row">
    <div class="form-group col-md-10 control-section">
        <label class="col-form-label">Upload Image:</label>
        <SfUploader ID="UploadFiles" AllowedExtensions=".png,.jpeg,.jpg">
            <UploaderEvents ValueChange="onChange" OnRemove="onRemove"></UploaderEvents>
            <UploaderTemplates>
                <Template Context="HttpContext">
                    <table>
                        <tr>
                            <td>
                                <img class="upload-image" alt="Preview Image @(HttpContext.Name)"
                                        src="@(files.Count >0 ? files.Where(item=>item.Name == HttpContext.Name)?.FirstOrDefault()?.Path : string.Empty)">
                            </td>
                            <td>
                                <div style="padding: 7px;">
                                    <h5 title="@(HttpContext.Name)">@(HttpContext.Name)</h5>
                                    <i>@(HttpContext.Size) Bytes</i>
                                </div>
                            </td>
                        </tr>
                    </table>
                    <span class="e-icons e-file-remove-btn remove" id="removeIcon" title="Remove"></span>
                    <span class="e-upload-icon e-icons e-file-remove-btn" title="Upload" id="iconUpload" @onclick="@uploadFile"></span>
                </Template>
            </UploaderTemplates>
        </SfUploader>
    </div>
</div>

<div class="control-section">
    <div class="control-wrapper">
        <div class="">
            <SfRichTextEditor ShowCharCount="true" MaxLength="2000" AutoSaveOnIdle="true" @bind-Value="postDto.Content">
                <RichTextEditorToolbarSettings Items="@Tools" />
            </SfRichTextEditor>
        </div>
    </div>
</div>

<div class="form-group">
    <label for="title">Title</label>
    <input type="text" @bind="postDto.Title" class="form-control" id="title" />
</div>

<br/>
<button @onclick="SavePost" class="btn btn-info">Save</button>

@code {
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    private string content { get; set; }

    private PostDto postDto = new();

    public MultipartFormDataContent formContent;
    public string responseStr;
    public HttpResponseMessage filepath { get; set; }
    List<fileInfo> files = new List<fileInfo>();

    public class fileInfo
    {
        public string Path { get; set; }
        public string Name { get; set; }
        public double Size { get; set; }
    }

    public void onChange(UploadChangeEventArgs args)
    {
        files = new List<fileInfo>();
        foreach (var file in args.Files)
        {
            var pathToSave = Path.Combine(Directory.GetCurrentDirectory(), "Images");
            var fullPath = Path.Combine(pathToSave, file.FileInfo.Name);
            byte[] bytes = file.Stream.ToArray();
            string base64 = Convert.ToBase64String(bytes);
            files.Add(new fileInfo() { Path = @"data:image/" + file.FileInfo.Type + ";base64," + base64, Name = file.FileInfo.Name, Size = file.FileInfo.Size });
            formContent = new MultipartFormDataContent {
                    { new ByteArrayContent(file.Stream.GetBuffer()), "\"upload\"", file.FileInfo.Name }
                };

        }
    }

    public async Task uploadFile(MouseEventArgs args)
    {
        filepath = await Http.PostAsync("https://localhost:7057/api/Post/Save", formContent);
        this.responseStr = await filepath.Content.ReadAsStringAsync();
    }

    public void onRemove(RemovingEventArgs args)
    {
       foreach (var removeFile in args.FilesData)
       {
           if (File.Exists(Path.Combine(@"\Images", removeFile.Name)))
           {
              File.Delete(Path.Combine(@"\Images\", removeFile.Name));
           }
       }
    }

    private async Task SavePost()
    {
        postDto.Description = "Test";
        postDto.CreatedAt = DateTime.Now;

        var response = await PostRepository.CreateAsync(EndPoint.PostEnpoint, postDto);

        if (response)
            NavManager.NavigateTo("/posts");
    }
}