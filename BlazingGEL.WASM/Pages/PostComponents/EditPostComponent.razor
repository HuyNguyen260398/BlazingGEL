@page "/posts/edit/{postId}"

@inject IPostRepository PostRepo
@inject NavigationManager NavManager

<h3>Edit</h3>

@if (int.Parse(postId) < 1 || string.IsNullOrWhiteSpace(postId))
{
    <h3>Post Id Error</h3>
} 
else if (post == null)
{
    <h3>Loading</h3>
}
else
{
    <EditForm Model="post" OnValidSubmit="OnSave" class="form-inline">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Title</label>
            <InputText type="text" @bind-Value="post.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="desc">Description</label>
            <InputTextArea type="text" @bind-Value="post.Description" class="form-control" id="desc" />
        </div>
        <div class="form-group">
            <label for="category">Category</label>
            <InputNumber type="number" @bind-Value="post.CategoryId" class="form-control" id="category" />
        </div>
        <div class="form-group">
            <label for="sub-category">Sub Category</label>
            <InputNumber type="number" @bind-Value="post.SubCategoryId" class="form-control" id="sub-category" />
        </div>
        <br/>
        <div class="form-group">
            <SfUploader AutoUpload="false">
                <UploaderEvents ValueChange="OnChange" OnRemove="OnRemove" OnClear="OnClear"/>
            </SfUploader>
            <img src="@post.Thumbnail" />
            <br/>
        </div>
        <div class="control-section">
            <div class="control-wrapper">
                <div class="">
                    <SfRichTextEditor ShowCharCount="true" MaxLength="2000" AutoSaveOnIdle="true" @bind-Value="post.Content">
                        <RichTextEditorToolbarSettings Items="@Tools" />
                    </SfRichTextEditor>
                </div>
            </div>
        </div>
        <div class="form-group">
            <InputCheckbox id="publish" @bind-Value="post.IsPublished" class="form-check-input" />
            <label for="publish">Publish</label>
        </div>
        <br/>
        <button type="submit" class="btn btn-info">Save</button>
        <br/>
        <br/>
        <button class="btn btn-secondary" @onclick="OnReturn">Back</button>
    </EditForm>
}

@code {
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    [Parameter]
    public string postId { get; set; }
    private string content { get; set; }
    private PostDto post = new();

    protected async override Task OnInitializedAsync()
    {
        post = await PostRepo.GetByIdAsync(EndPoint.PostEnpoint, int.Parse(postId));
    }

    private void OnRemove(RemovingEventArgs args)
    {
        foreach(var removeFile in args.FilesData)
        {
            if (File.Exists(Path.Combine(@"rootPath", removeFile.Name)))
            {
                File.Delete(Path.Combine(@"rootPath", removeFile.Name));
            }
        }
        StateHasChanged();
    }

    private void OnClear(ClearingEventArgs args)
    {
        foreach(var removeFile in args.FilesData)
        {
            if (File.Exists(Path.Combine(@"rootPath", removeFile.Name)))
            {
                File.Delete(Path.Combine(@"rootPath", removeFile.Name));
            }
        }
        StateHasChanged();
    }

    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            var path = @"path" + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();

            byte[] bytes = file.Stream.ToArray();
            string base64 = Convert.ToBase64String(bytes);
            post.Thumbnail = @"data:image/" + file.FileInfo.Type + ";base64," + base64;
            StateHasChanged();
        }
    }

    private async Task OnSave()
    {
        post.Slug = Extension.GenerateSlug(post.Title);
        post.CreatedAt = DateTime.Now;

        if (post.IsPublished)
            post.PublishedAt = DateTime.Now;

        post.Views = 0;
        post.Comments = 0;

        var response = await PostRepo.UpdateAsync(EndPoint.PostEnpoint, post);

        if (response)
            OnReturn();
    }

    private void OnReturn()
    {
        NavManager.NavigateTo("/posts");
    }
}